# ~/.tmuxinator/python-projects.yml
name: python
root: ~/workspace/github/python-projects

# Optional tmux socket
# socket_name: foo

# Runs before everything. Use it to start daemons etc.
# pre: sudo /etc/rc.d/mysqld start

# Project hooks
# Runs on project start, always
# on_project_start: command
# Run on project start, the first time
# on_project_first_start: command
# Run on project start, after the first time
# on_project_restart: command
# Run on project exit ( detaching from tmux session )
# on_project_exit: command
# Run on project stop
# on_project_stop: command

# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.
# pre_window: rbenv shell 2.0.0-p247

# Pass command line options to tmux. Useful for specifying a different tmux.conf.
# tmux_options: -f ~/.tmux.mac.conf

# Change the command to call tmux.  This can be used by derivatives/wrappers like byobu.
# tmux_command: byobu

# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.
# startup_window: editor

# Specifies (by index) which pane of the specified window will be selected on project startup. If not set, the first pane is used.
# startup_pane: 1

# Controls whether the tmux session should be attached to automatically. Defaults to true.
# attach: false

# Runs after everything. Use it to attach to tmux with custom options etc.
# post: tmux -CC attach -t mac

windows: 
  
 # ========================================
    # open docker jupyter notebook server based on python 3.6
 # ========================================
    # - jupyter:
    #     - cd ~/workspace/github/my-blog/work-notes/notes/data-scientist-notes
    #     - source ~/workspace/github/python-projects/env36/bin/activate
    #     - jupyter notebook

    # Open a jupyter notbook scientific python stack in a docker
    # check detail : https://hub.docker.com/r/jupyter/scipy-notebook/
    # - jupyter:
    #     - cd ~/workspace/github/my-blog/work-notes/notes/data-scientist-notes
    #     # for basic using
    #     - docker run -it --rm -p 8888:8888 jupyter/scipy-notebook -v /Users/kevin/workspace/github/my-blog/work-notes/notes/data-scientist-notes:/home/kevin/workspace/github/data-scientist-notes
        # for setting the base URL of the notebook server, run the following:
    # - jupyter:
        # - docker run -d -p 8888:8888 jupyter/scipy-notebook start-notebook.sh --NotebookApp.base_url=~/workspace/github/my-blog/work-notes/notes/data-scientist-notes
        # for disable all authentication mechanisms
    # - jupyter:
        # - docker run -d -p 8888:8888 jupyter/scipy-notebook start-notebook.sh --NotebookApp.token=''
        # for start an ipython console in a container
    # - jupyter:
        # - docker run -it --rm jupyter/scipy-notebook start.sh ipython
    # do not use local jupyter anymore, instead of docker container
  - data-science: 
      - cd ~/dotfiles-mac/work-envs/data-science-env
      # re-build all docker images, and not push onto docker cloud 
      # - make build-test-all
      # re-build all docker images, and push onto docker cloud 
      # - make release-all
      # start current docker by docker compose shell script, using https, and send a password for notebook server
      - NAME=my-notebook PORT=8888 WORK_VOLUME=data-scientist-notes NOTEBOOK_IMAGE_VERSION=latest data-science-notebook/up.sh
      # showing logs window of the jupyter notebook, it will close the container when there is a close of this command 
      # - docker exec for attaching my-notebook
      - sleep 1m
      - docker exec -it my-notebook /bin/bash
  # waiting for docker finish startup, and then use docker exec to login into container for other operations
  - kera-jupyter: 
      - cd ~/dotfiles-mac/work-envs/data-science-env
      # re-build all docker images, and not push onto docker cloud 
      # - make build-test-all
      # re-build all docker images, and push onto docker cloud 
      # - make release-all
      # start current docker by docker compose shell script, using https, and send a password for notebook server
      - NAME=my-kera-jupyter PORT=9999 WORK_VOLUME=kera-jupyter NOTEBOOK_IMAGE_VERSION=latest kera-jupyter/up.sh
      # showing logs window of the jupyter notebook, it will close the container when there is a close of this command 
      # - docker exec for attaching my-notebook
      - sleep 1m
      - docker exec -it my-kera-jupyter /bin/bash

  - postgres-docker:
      - sleep 5m
      - docker exec -it my-notebook-postgres /bin/bash -c "su postgres"
  - mongodb-docker:
      - sleep 6m
      # - docker exec -it my-notebook-mongo mongo admin
      - docker exec -it my-notebook-mongo mongo admin
      # - docker run -it --rm --link my-notebook-mongo:mongo mongo mongo -u kevin -p trsadmin --authenticationDatabase admin my-notebook-mongo/scrapy-database


################################
###   # start a python27 environment for scrapy
################################
    
  # - scrapy-app: 
  #     - cd ~/dotfiles-mac/work-envs/data-science-env
  #     - NAME=scrapy-app PORT=8080 WORK_VOLUME=scrapy-notes NOTEBOOK_IMAGE_VERSION=latest scrapy-app/scrapy-up.sh
  #     - sleep 1m
  #     - docker exec -it scrapy-app /bin/bash



 # - django:
  #    - cd django
  #    - source ~/workspace/github/python-projects/env36/bin/activate
  # - handbook:
  #    - cd ~/workspace/github/my-blog/work-notes/notes/data-scientist-notes/PythonDataScienceHandbook
  #    - source ~/workspace/github/python-projects/env36/bin/activate
  # - datascience:
  #    - cd ~/workspace/github/my-blog/work-notes/notes/data-scientist-notes/R_Python_ForDataScience
  #    - source ~/workspace/github/python-projects/env36/bin/activate
  # - roadmap:
  #    - cd ~/workspace/github/my-blog/work-notes/notes/data-scientist-notes/data-scientist-roadmap
  #    - source ~/workspace/github/python-projects/env36/bin/activate

      
    # Synchronize all panes of this window, can be enabled before or after the pane commands run.
      # 'before' represents legacy functionality and will be deprecated in a future release, in favour of 'after'
      # synchronize: after
